"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var ts = require("typescript");
var Lint = require("tslint");
var tsutils_1 = require("tsutils");
var OPTION_FUNCTION_EXPRESSION_NAME = 'unused-function-expression-name';
var OPTION_CLASS_EXPRESSION_NAME = 'unused-class-expression-name';
var OPTION_CATCH_BINDING = 'unused-catch-binding';
var OPTION_IGNORE_PARAMETERS = 'ignore-parameters';
var OPTION_IGNORE_IMPORTS = 'ignore-imports';
var Rule = (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        return this.applyWithWalker(new UnusedWalker(sourceFile, this.ruleName, {
            functionExpressionName: this.ruleArguments.indexOf(OPTION_FUNCTION_EXPRESSION_NAME) !== -1,
            classExpressionName: this.ruleArguments.indexOf(OPTION_CLASS_EXPRESSION_NAME) !== -1,
            ignoreParameters: this.ruleArguments.indexOf(OPTION_IGNORE_PARAMETERS) !== -1,
            ignoreImports: this.ruleArguments.indexOf(OPTION_IGNORE_IMPORTS) !== -1,
            catchBinding: this.ruleArguments.indexOf(OPTION_CATCH_BINDING) !== -1,
        }));
    };
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
var UnusedWalker = (function (_super) {
    tslib_1.__extends(UnusedWalker, _super);
    function UnusedWalker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UnusedWalker.prototype.walk = function (sourceFile) {
        var _this = this;
        var usage = tsutils_1.collectVariableUsage(sourceFile);
        usage.forEach(function (variable, identifier) {
            if (isExcluded(variable, sourceFile, usage, _this.options))
                return;
            switch (identifier.parent.kind) {
                case ts.SyntaxKind.FunctionExpression:
                    if (variable.uses.length === 0 && _this.options.functionExpressionName)
                        _this._failNamedExpression(identifier, "Function");
                    return;
                case ts.SyntaxKind.ClassExpression:
                    if (variable.uses.length === 0 && _this.options.classExpressionName)
                        _this._failNamedExpression(identifier, "Class");
                    return;
            }
            if (variable.uses.length === 0) {
                if (identifier.text === 'React' && _this.sourceFile.languageVariant === ts.LanguageVariant.JSX &&
                    isImportFromExternal(identifier) && containsJsx(_this.sourceFile))
                    return;
                return _this._fail(identifier, 'unused');
            }
            var uses = filterWriteOnly(variable.uses, identifier);
            if (uses.length === 0)
                return _this._fail(identifier, 'only written and never read');
            var filtered = uses.length !== variable.uses.length;
            uses = filterUsesInDeclaration(uses, variable.declarations);
            if (uses.length === 0)
                return _this._fail(identifier, "only " + (filtered ? 'written or ' : '') + "used inside of its declaration");
        });
    };
    UnusedWalker.prototype._fail = function (identifier, error) {
        return this.addFailureAtNode(identifier, showKind(identifier) + " '" + identifier.text + "' is " + error + ".");
    };
    UnusedWalker.prototype._failNamedExpression = function (identifier, kind) {
        this.addFailureAtNode(identifier, kind + " '" + identifier.text + "' is never used by its name. Convert it to an anonymous " + kind.toLocaleLowerCase() + " expression.", Lint.Replacement.deleteFromTo(identifier.pos, identifier.end));
    };
    return UnusedWalker;
}(Lint.AbstractWalker));
function containsJsx(node) {
    switch (node.kind) {
        case ts.SyntaxKind.JsxElement:
        case ts.SyntaxKind.JsxSelfClosingElement:
            return true;
        default:
            return ts.forEachChild(node, containsJsx);
    }
}
function filterUsesInDeclaration(uses, declarations) {
    var result = [];
    outer: for (var _i = 0, uses_1 = uses; _i < uses_1.length; _i++) {
        var use = uses_1[_i];
        for (var _a = 0, declarations_1 = declarations; _a < declarations_1.length; _a++) {
            var declaration = declarations_1[_a];
            var parent = declaration.parent;
            if (use.location.pos > parent.pos && use.location.pos < parent.end &&
                (parent.kind !== ts.SyntaxKind.VariableDeclaration ||
                    initializerHasNoSideEffect(parent, use.location)))
                continue outer;
        }
        result.push(use);
    }
    return result;
}
function initializerHasNoSideEffect(declaration, use) {
    if (declaration.initializer === undefined)
        return true;
    return (function cb(node) {
        if (node.pos > use.pos)
            return 2;
        if (node.end <= use.pos)
            return;
        switch (node.kind) {
            case ts.SyntaxKind.CallExpression:
            case ts.SyntaxKind.NewExpression:
            case ts.SyntaxKind.TaggedTemplateExpression:
                return 1;
            case ts.SyntaxKind.ArrowFunction:
            case ts.SyntaxKind.FunctionExpression:
            case ts.SyntaxKind.ClassExpression:
                return 2;
        }
        return ts.forEachChild(node, cb);
    })(declaration.initializer) !== 1;
}
function filterWriteOnly(uses, identifier) {
    var result = [];
    for (var _i = 0, uses_2 = uses; _i < uses_2.length; _i++) {
        var use = uses_2[_i];
        if (use.domain & (2 | 8) ||
            tsutils_1.isExpressionValueUsed(use.location) && !isUpdate(use.location, identifier))
            result.push(use);
    }
    return result;
}
function isUpdate(use, identifier) {
    while (true) {
        var parent = use.parent;
        switch (parent.kind) {
            case ts.SyntaxKind.ParenthesizedExpression:
            case ts.SyntaxKind.NonNullExpression:
            case ts.SyntaxKind.TypeAssertionExpression:
            case ts.SyntaxKind.AsExpression:
            case ts.SyntaxKind.PrefixUnaryExpression:
            case ts.SyntaxKind.PostfixUnaryExpression:
            case ts.SyntaxKind.TypeOfExpression:
            case ts.SyntaxKind.ConditionalExpression:
            case ts.SyntaxKind.SpreadElement:
            case ts.SyntaxKind.SpreadAssignment:
            case ts.SyntaxKind.ObjectLiteralExpression:
            case ts.SyntaxKind.ArrayLiteralExpression:
                use = parent;
                break;
            case ts.SyntaxKind.PropertyAssignment:
            case ts.SyntaxKind.ShorthandPropertyAssignment:
            case ts.SyntaxKind.TemplateSpan:
                use = parent.parent;
                break;
            case ts.SyntaxKind.BinaryExpression:
                if (tsutils_1.isAssignmentKind(parent.operatorToken.kind))
                    return parent.right === use &&
                        parent.left.kind === ts.SyntaxKind.Identifier &&
                        parent.left.text === identifier.text;
                use = parent;
                break;
            default:
                return false;
        }
    }
}
function isExcluded(variable, sourceFile, usage, opts) {
    if (variable.exported || variable.inGlobalScope)
        return true;
    for (var _i = 0, _a = variable.declarations; _i < _a.length; _i++) {
        var declaration = _a[_i];
        var parent = declaration.parent;
        if (declaration.text.startsWith('_')) {
            switch (parent.kind) {
                case ts.SyntaxKind.Parameter:
                    return true;
                case ts.SyntaxKind.VariableDeclaration:
                    if (parent.parent.parent.kind === ts.SyntaxKind.ForInStatement ||
                        parent.parent.parent.kind === ts.SyntaxKind.ForOfStatement)
                        return true;
                    break;
                case ts.SyntaxKind.BindingElement:
                    if (parent.dotDotDotToken !== undefined)
                        break;
                    var pattern = parent.parent;
                    if (pattern.kind === ts.SyntaxKind.ObjectBindingPattern &&
                        pattern.elements[pattern.elements.length - 1].dotDotDotToken !== undefined)
                        return true;
            }
        }
        if (tsutils_1.isParameterDeclaration(parent) &&
            (opts.ignoreParameters || tsutils_1.isParameterProperty(parent) || !tsutils_1.isFunctionWithBody(parent.parent)) ||
            !opts.catchBinding && parent.kind === ts.SyntaxKind.VariableDeclaration && parent.parent.kind === ts.SyntaxKind.CatchClause ||
            parent.kind === ts.SyntaxKind.TypeParameter && parent.parent.kind === ts.SyntaxKind.MappedType ||
            parent.kind === ts.SyntaxKind.TypeParameter && typeParameterMayBeRequired(parent, usage))
            return true;
        if (/\.tsx?$/.test(sourceFile.fileName) && !sourceFile.isDeclarationFile && opts.ignoreImports && isImportFromExternal(declaration))
            return true;
    }
    return false;
}
function isImportFromExternal(node) {
    switch (node.parent.kind) {
        case ts.SyntaxKind.ImportEqualsDeclaration:
            if (node.parent.moduleReference.kind === ts.SyntaxKind.ExternalModuleReference)
                return true;
            break;
        case ts.SyntaxKind.NamespaceImport:
        case ts.SyntaxKind.ImportSpecifier:
        case ts.SyntaxKind.ImportClause:
            return true;
        default:
            return false;
    }
}
function typeParameterMayBeRequired(parameter, usage) {
    var parent = parameter.parent;
    switch (parent.kind) {
        default:
            return false;
        case ts.SyntaxKind.InterfaceDeclaration:
        case ts.SyntaxKind.ClassDeclaration:
            if (typeParameterIsUsed(parameter, usage))
                return true;
            if (parent.name === undefined)
                return false;
            var variable = usage.get(parent.name);
            if (!variable.exported)
                return variable.inGlobalScope;
    }
    parent = parent.parent;
    while (true) {
        switch (parent.kind) {
            case ts.SyntaxKind.ModuleBlock:
                parent = parent.parent;
                break;
            case ts.SyntaxKind.ModuleDeclaration:
                if (parent.name.kind !== ts.SyntaxKind.Identifier)
                    return ts.isExternalModule(parent.getSourceFile());
                var variable = usage.get(parent.name);
                if (!variable.exported)
                    return variable.inGlobalScope;
                parent = parent.parent;
                break;
            default:
                return false;
        }
    }
}
function typeParameterIsUsed(parameter, usage) {
    if (usage.get(parameter.name).uses.length !== 0)
        return true;
    var parent = parameter.parent;
    if (parent.name === undefined)
        return false;
    var index = parent.typeParameters.indexOf(parameter);
    for (var _i = 0, _a = usage.get(parent.name).declarations; _i < _a.length; _i++) {
        var declaration = _a[_i];
        var declarationParent = declaration.parent;
        if (declarationParent === parent)
            continue;
        switch (declarationParent.kind) {
            case ts.SyntaxKind.ClassDeclaration:
            case ts.SyntaxKind.InterfaceDeclaration:
                if (declarationParent.typeParameters !== undefined &&
                    declarationParent.typeParameters.length > index &&
                    usage.get(declarationParent.typeParameters[index].name).uses.length !== 0)
                    return true;
        }
    }
    return false;
}
function showKind(node) {
    switch (node.parent.kind) {
        case ts.SyntaxKind.BindingElement:
        case ts.SyntaxKind.VariableDeclaration:
            return 'Variable';
        case ts.SyntaxKind.Parameter:
            return 'Parameter';
        case ts.SyntaxKind.FunctionDeclaration:
            return 'Function';
        case ts.SyntaxKind.ClassDeclaration:
            return 'Class';
        case ts.SyntaxKind.InterfaceDeclaration:
            return 'Interface';
        case ts.SyntaxKind.ImportClause:
        case ts.SyntaxKind.NamespaceImport:
        case ts.SyntaxKind.ImportSpecifier:
        case ts.SyntaxKind.ImportEqualsDeclaration:
            return 'Import';
        case ts.SyntaxKind.EnumDeclaration:
            return 'Enum';
        case ts.SyntaxKind.ModuleDeclaration:
            return 'Namespace';
        case ts.SyntaxKind.TypeAliasDeclaration:
            return 'TypeAlias';
        case ts.SyntaxKind.TypeParameter:
            return 'TypeParameter';
        default:
            throw new Error("Unhandled kind " + node.parent.kind + ": " + ts.SyntaxKind[node.parent.kind]);
    }
}
//# sourceMappingURL=data:application/json;base64,