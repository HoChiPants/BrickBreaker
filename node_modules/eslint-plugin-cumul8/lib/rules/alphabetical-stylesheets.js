/**
	@fileoverview Rule to enforce alphabetical styles in stylesheets.
	@copyright 2016 Eight Solutions Inc. All rights reserved.
	@author Jordan Schalm <jordan.schalm@cumul8.com>
**/

module.exports = function (context) {
	var SPREAD_PROPERTY_REGEX = /(Experimental)?SpreadProperty/;

	var isAlphaOrdered = function (a, b) {
		return a.toLowerCase() < b.toLowerCase();
	};

	var ensureAlphaOrderedStyles = function (styles) {
		var len = styles.length;

		for (var i = 0; i < len - 1; i++) {
			var ordinal1, ordinal2;

			if (styles[i].type.match(SPREAD_PROPERTY_REGEX)) {
				ordinal1 = styles[i].argument.name;
			} else if (styles[i].type === 'Property') {
				ordinal1 = styles[i].key.name;
			}

			if (styles[i + 1].type.match(SPREAD_PROPERTY_REGEX)) {
				ordinal2 = styles[i + 1].argument.name;
			} else if (styles[i + 1].type === 'Property') {
				ordinal2 = styles[i + 1].key.name;
			}

			if (!ordinal1 || !ordinal2) continue;

			if (!isAlphaOrdered(ordinal1, ordinal2)) {
				context.report({
					node: styles[i + 1],
					message: 'StyleSheet objects should have their keys ordered alphabetically.'
				});
			}
		}
	};

	var ensureAlphaOrderedObjectAssignment = function (args) {
		var len = args.length;

		for (var i = 0; i < len; i++) {
			if (args[i].type === 'ObjectExpression') {
				ensureAlphaOrderedStyles(args[i].properties);
			}
		}
	};

	return {
		CallExpression: function (node) {
			if (
				node &&
				node.callee &&
				node.callee.object &&
				node.callee.property &&
				node.callee.object.name === 'StyleSheet' &&
				node.callee.property.name === 'create'
			) {
				var parameter = node.arguments[0];
				// Parameter will be an identifier if a variable is passed.
				if (parameter.type === 'Identifier') {
					return;
				}
				if (parameter.type !== 'ObjectExpression') {
					context.report({
						node: parameter,
						message: 'Arguments to StyleSheet#create must be an identifier or object literal'
					});
					return;
				}
				var styles = parameter.properties;
				var nStyles = styles.length;

				// Ensure that top-level StyleSheet keys are ordered
				ensureAlphaOrderedStyles(styles);

				for (var i = 0; i < nStyles; i++) {
					var style = styles[i].value;

					// Ensure that keys within Object literal StyleSheet
					// values are ordered.
					if (style.type === 'ObjectExpression') {
						ensureAlphaOrderedStyles(style.properties);
					}

					// Ensure that keys within Object literal arguments to
					// Object.assign are ordered
					if (style.type === 'CallExpression') {
						ensureAlphaOrderedObjectAssignment(style.arguments);
					}
				}
			}
		}
	};
};

module.exports.schema = [];
