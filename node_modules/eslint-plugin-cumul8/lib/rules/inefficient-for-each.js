/**
 * @fileoverview Rule to flag use of an inefficient forEach return statements
 * @author Evgueni Naverniouk  <evgueni.naverniouk@cumul8.com>
 * @copyright 2016 Eight Solutions Inc. All rights reserved.
 */

module.exports = function (context) {
	var hasReturnStatement = function (nodes) {
		for (var i = 0, l = nodes.length; i < l; i++) {
			var node = nodes[i];

			if (
				(node.type === 'ReturnStatement') ||
				(node.body && node.body.body ? hasReturnStatement(node.body.body) : false) ||
				(node.consequent && !node.consequent.body ? hasReturnStatement([node.consequent]) : false) ||
				(node.consequent && node.consequent.body ? hasReturnStatement(node.consequent.body) : false)
			) {
				return true;
			}
		}

		return false;
	};

	return {
		CallExpression: function (node) {
			if (node.callee.property && node.callee.property.name === 'forEach') {
				if (hasReturnStatement(node.arguments)) {
					context.report({
						message: "Don't use return statements inside a forEach loop. Use a regular for loop instead.",
						node: node
					});
				}
			}
		}
	};
};

module.exports.schema = [];
