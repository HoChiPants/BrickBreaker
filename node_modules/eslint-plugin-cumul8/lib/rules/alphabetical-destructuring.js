/**
 * @fileoverview Rule to enforce alphabetical styles in stylesheets.
 * @author Ev Haus <ev.haus@cumul8.com>
 * @copyright 2017 Eight Solutions Inc. All rights reserved.
**/

var isArrayAlphabetical = require('./../utils/isArrayAlphabetical');

var sortItems = function (currentCode) {
	var pattern = /((\.+)?([_a-zA-Z0-9]|[a-zA-Z0-9-_'"[\]]|(: ?))+),?/g;

	var current = currentCode.match(pattern).map(function (item) {
		return item.replace(',', '');
	});

	var sorted = current.slice(0).sort(function (a, b) {
		var aStr = a.replace(',', '').replace(' ', '').toLowerCase();
		var bStr = b.replace(',', '').replace(' ', '').toLowerCase();

		// Spread items always last
		if (aStr.indexOf('...') === 0) return 1;
		if (bStr.indexOf('...') === 0) return -1;

		if (aStr > bStr) return 1;
		if (aStr < bStr) return -1;
		return 0;
	});

	var i = -1;
	return currentCode.replace(pattern, function (item, piece) {
		i++;
		return item.replace(piece, sorted[i]);
	});
};

var getKeyName = function (item) {
	// Spread Operators
	if (item.type === 'ExperimentalRestProperty') return item.argument.name;

	// Regular properties, ie. {a, b}
	if (item.key && item.key.value) return item.key.value;

	// computed object property names, ie. {[a]: b}
	if (item.key && item.key.name) return item.key.name;

	return null;
};

module.exports = function (context) {
	var MESSAGE = 'Destructuring assignments should have their keys ordered alphabetically.';
	var sourceCode = context.getSourceCode();

	return {
		ObjectPattern: function (node) {
			for (var i = 0, l = node.properties.length; i < l; i++) {
				var item = node.properties[i];
				if (item.type !== 'Property' || i === 0) continue;
				var prevItem = node.properties[i - 1];
				var itemName = getKeyName(item);
				var prevItemName = getKeyName(prevItem);

				if (!isArrayAlphabetical([prevItemName, itemName])) {
					context.report({
						fix: function (fixer) {
							var currentCode = sourceCode.getText(node);
							var result = fixer.replaceText(node, sortItems(currentCode));
							return result;
						},
						message: MESSAGE,
						node: node
					});
				}
			}
		}
	};
};

module.exports.schema = [];
